#!/bin/bash
# My Telegram : https://t.me/hokagevpnpremium
# ==========================================
# Modern Color Scheme
RED='\033[1;31m'
NC='\033[0m'
GREEN='\033[1;32m'
ORANGE='\033[1;33m'
BLUE='\033[1;34m'
PURPLE='\033[1;35m'
CYAN='\033[1;36m'
LIGHT='\033[1;37m'
DARK='\033[1;30m'
# ==========================================

# Bot configuration
CHATID=$(grep -E "^#bot# " "/etc/bot/.bot.db" | cut -d ' ' -f 3)
KEY=$(grep -E "^#bot# " "/etc/bot/.bot.db" | cut -d ' ' -f 2)
export TIME="10"
export URL="https://api.telegram.org/bot$KEY/sendMessage"

# Function to display header
display_header() {
    clear
    echo -e "${PURPLE}"
    echo -e "╔══════════════════════════════════════════════╗"
    echo -e "║          🛡️ VPS RESTORE SYSTEM 🛡️           ║"
    echo -e "╠══════════════════════════════════════════════╣"
    echo -e "║      Automated Restore from Backup File      ║"
    echo -e "╚══════════════════════════════════════════════╝"
    echo -e "${NC}"
}

# Function to send Telegram notification
notif_restore() {
    echo -e "${BLUE}🔹 Sending Telegram notification...${NC}"
    IP=$(curl -sS ipv4.icanhazip.com)
    TEXT="
<code>◇━━━━━━━━━━━━━━◇</code>
<b>  🔄 RESTORE NOTIFICATION 🔄</b>
<b>     VPS Restore Details</b>
<code>◇━━━━━━━━━━━━━━◇</code>
<b>🖥️ IP VPS  :</b> <code>${IP}</code>
<b>📅 Date   :</b> <code>$(date +"%Y-%m-%d")</code>
<b>⏰ Time   :</b> <code>$(date +"%H:%M:%S")</code>
<code>◇━━━━━━━━━━━━━━◇</code>
<code>✅ Restore Process Completed</code>
<code>◇━━━━━━━━━━━━━━◇</code>
<code>🤖 Bot : https://t.me/hokagevpnpremium</code>
"
    curl -s --max-time $TIME -d "chat_id=$CHATID&disable_web_page_preview=1&text=$TEXT&parse_mode=html" $URL >/dev/null
    echo -e "${GREEN}✔ Telegram notification sent${NC}"
}

# Function to restore files with verification
restore_file() {
    local src=$1
    local dest=$2
    local desc=$3
    
    if [ -f "$src" ]; then
        cp "$src" "$dest" && echo -e "${GREEN}✔ $desc restored${NC}" || echo -e "${RED}❌ Failed to restore $desc${NC}"
    else
        echo -e "${ORANGE}⚠ $desc not found in backup${NC}"
    fi
}

# Function to restore directories with verification
restore_dir() {
    local src=$1
    local dest=$2
    local desc=$3
    
    if [ -d "$src" ]; then
        # Remove existing directory if it exists
        [ -d "$dest" ] && rm -rf "$dest"
        cp -r "$src" "$dest" && echo -e "${GREEN}✔ $desc restored${NC}" || echo -e "${RED}❌ Failed to restore $desc${NC}"
    else
        echo -e "${ORANGE}⚠ $desc not found in backup${NC}"
    fi
}

# Main restore process
display_header
echo -e "${GREEN}🔹 Please enter the backup file link${NC}"
read -rp "🔗 Backup URL: " -e url

echo -e "${BLUE}🔹 Downloading backup file...${NC}"
if ! wget -O backup.zip "$url"; then
    echo -e "${RED}❌ Failed to download backup file${NC}"
    exit 1
fi
echo -e "${GREEN}✔ Backup downloaded successfully${NC}"

echo -e "${BLUE}🔹 Extracting backup files...${NC}"
if ! unzip -o backup.zip; then
    echo -e "${RED}❌ Failed to extract backup file${NC}"
    rm -f backup.zip
    exit 1
fi
echo -e "${GREEN}✔ Backup extracted successfully${NC}"

rm -f backup.zip
sleep 1

echo -e "${PURPLE}⚙️ Starting restore process...${NC}"
if [ ! -d "/root/backup" ]; then
    echo -e "${RED}❌ Backup directory not found${NC}"
    exit 1
fi

cd /root/backup || exit 1

# Restore critical system files
echo -e "${CYAN}🔸 Restoring system configuration files...${NC}"
restore_file "passwd" "/etc/passwd" "User accounts"
restore_file "group" "/etc/group" "User groups"
restore_file "shadow" "/etc/shadow" "User passwords"
restore_file "gshadow" "/etc/gshadow" "Group passwords"
restore_file "crontab" "/etc/crontab" "Cron jobs"

# Restore important directories
echo -e "${CYAN}🔸 Restoring application data...${NC}"
restore_dir "kyt" "/var/lib/kyt" "kyt data"
restore_dir "xray" "/etc/xray" "Xray configuration"
restore_dir "html" "/var/www/html" "Web content"

# Restore additional files if they exist
[ -f "/root/email" ] && restore_file "email" "/root/email" "Email configuration"
[ -f "/etc/bot/.bot.db" ] && restore_file ".bot.db" "/etc/bot/.bot.db" "Bot configuration"

# Set proper permissions
echo -e "${BLUE}🔹 Setting correct permissions...${NC}"
chmod 644 /etc/passwd /etc/group /etc/shadow /etc/gshadow /etc/crontab
chmod -R 755 /var/lib/kyt /etc/xray /var/www/html

# Send notification
notif_restore

# Cleanup
echo -e "${BLUE}🔹 Cleaning up temporary files...${NC}"
rm -rf /root/backup
rm -f backup.zip

# Final output
display_header
echo -e "${GREEN}"
echo -e "╔══════════════════════════════════════════════╗"
echo -e "║             RESTORE COMPLETE                 ║"
echo -e "╠══════════════════════════════════════════════╣"
echo -e "║  ✅ All files and configurations restored     ║"
echo -e "║  ✅ System should be fully functional        ║"
echo -e "║  ✅ Permissions set correctly                ║"
echo -e "╚══════════════════════════════════════════════╝"
echo -e "${NC}"
echo -e "${GREEN}✔ Restore process completed successfully${NC}"
echo -e "\n${ORANGE}Press Enter to continue...${NC}"
read -p ""

# Suggest services that might need restarting
echo -e "${CYAN}🔄 You may need to restart these services:${NC}"
echo -e "systemctl restart xray"
echo -e "systemctl restart cron"
echo -e "systemctl restart nginx/apache2 (if applicable)"
